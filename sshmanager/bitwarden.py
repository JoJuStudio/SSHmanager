"""Minimal Bitwarden/Vaultwarden API wrapper used by SSH Manager.

The API integration is intentionally lightweight. The application only needs to
fetch items from a specific folder and therefore authenticates using an API
access token generated by the Bitwarden web vault.

Due to the limited scope, only a subset of the API is implemented.
"""

from __future__ import annotations

import json
import logging
from typing import Any, Optional, List
from urllib import request, error, parse

from .models import Connection


_DEFAULT_SERVER = "https://vault.bitwarden.com"
_token: Optional[str] = None
_server: str = _DEFAULT_SERVER


def login(email: str, password: str, server: str | None = None) -> bool:
    """Authenticate using email and master password.

    Parameters
    ----------
    email:
        Account email address.
    password:
        Master password used to unlock the vault.
    server:
        Base URL of the Vaultwarden instance. Defaults to the official
        Bitwarden cloud.
    """

    if not email or not password:
        return False
    global _token, _server
    _server = server or _DEFAULT_SERVER
    data = parse.urlencode(
        {
            "grant_type": "password",
            "username": email,
            "password": password,
            "scope": "api offline_access",
            "client_id": "desktop",
        }
    ).encode()
    url = f"{_server}/identity/connect/token"
    req = request.Request(url, data=data)
    req.add_header("Content-Type", "application/x-www-form-urlencoded")
    try:
        with request.urlopen(req) as resp:
            resp_data = json.loads(resp.read().decode())
    except error.URLError as exc:
        logging.error("Bitwarden login failed: %s", exc)
        return False
    token = resp_data.get("access_token")
    if not token:
        logging.error("Bitwarden login response missing access_token")
        return False
    _token = token
    return True


def get_status() -> str:
    """Return ``"unlocked"`` if a token is available, otherwise
    ``"unauthenticated"``."""

    return "unlocked" if _token else "unauthenticated"


def is_unlocked() -> bool:
    return _token is not None


def _api_request(path: str) -> Any:
    if _token is None:
        raise RuntimeError("Bitwarden API token not set")
    url = f"{_server}/api{path}"
    req = request.Request(url)
    req.add_header("Authorization", f"Bearer {_token}")
    try:
        with request.urlopen(req) as resp:
            return json.loads(resp.read().decode())
    except error.URLError as exc:
        logging.error("Bitwarden API request failed: %s", exc)
        return None


def _get_ssh_folder_id() -> Optional[str]:
    data = _api_request("/folders")
    if not data:
        return None
    for folder in data.get("data", []):
        if folder.get("name") == "SSH":
            return folder.get("id")
    return None


def fetch_credentials(item: str) -> Optional[dict[str, Any]]:
    """Fetch connection configuration from a Bitwarden item."""
    if not is_unlocked():
        return None
    data = _api_request(f"/ciphers/{parse.quote(item)}")
    if not data:
        return None
    notes = data.get("notes") or data.get("notesPlain", "")
    if not notes:
        return None
    try:
        return json.loads(notes)
    except json.JSONDecodeError as exc:
        logging.error("Config in Bitwarden notes is invalid JSON: %s", exc)
        return None


def list_connections() -> List[Connection]:
    """Return all connections stored in the ``SSH`` folder."""
    conns: List[Connection] = []
    if not is_unlocked():
        return conns
    folder_id = _get_ssh_folder_id()
    if folder_id is None:
        logging.error("Bitwarden folder 'SSH' not found")
        return conns
    data = _api_request(f"/ciphers?folderId={parse.quote(folder_id)}")
    if not data:
        return conns
    for item in data.get("data", []):
        login_data = item.get("login", {})
        username = login_data.get("username")
        uris = login_data.get("uris") or []
        uri = uris[0].get("uri") if uris else None
        if not (username and uri):
            continue
        label = item.get("name") or username
        conns.append(Connection(label=label, host=uri, username=username))
    return conns
